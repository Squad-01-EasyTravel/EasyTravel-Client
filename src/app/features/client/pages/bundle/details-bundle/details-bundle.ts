import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Navbar } from '../../../../../shared/navbar/navbar';
import { Footer } from '../../../../../shared/footer/footer';
import { CartConfirmationModal } from '../../../../../shared/cart-confirmation-modal/cart-confirmation-modal';
import { BundleService } from '@/app/shared/services/bundle-service';
import { BookingService } from '@/app/shared/services/booking.service';
import { NotificationService } from '@/app/shared/services/notification.service';
import { CartConfirmationService } from '@/app/shared/services/cart-confirmation.service';
import { AuthService } from '@/app/shared/services/auth.service';
import { ReviewService, ReviewWithUser } from '@/app/shared/services/review.service';
import { BundleClass } from '../class/bundle-class';
import { MediaResponse } from '../../../../../shared/models/media-response.interface';
import { BundleLocationResponse } from '../../../../../shared/models/bundle-location-response.interface';

// Interface para review do backend
interface ReviewResponse {
  id: number;
  rating: string; // 'FIVE_STARS', 'FOUR_STARS', etc.
  comment: string;
  avaliationDate: string;
  travelHistoryId: number;
  bundleId: number;
}

// Interface para tipagem do pacote
interface Pacote {
  id: number;
  titulo: string;
  imagemPrincipal: string;
  preco: number;
  avaliacao: number;
  totalAvaliacoes: number;
  dataIda: string;
  dataVolta: string;
  duracao: string;
  tipoViagem: string;
  incluso: string;
  categoria: string;
  localizacao: string;
  descricaoCompleta: string;
  destino: string;
  localPartida: string;
  localDestino: string;
  descricaoIncluso: string;
  avaliacoes: Avaliacao[];
}

interface Avaliacao {
  id: number;
  nomeUsuario: string;
  avatarUsuario: string;
  nota: number;
  comentario: string;
  dataAvaliacao: Date;
}

@Component({
  selector: 'app-details-bundle',
  imports: [CommonModule, FormsModule, HttpClientModule, Navbar, Footer, CartConfirmationModal],
  templateUrl: './details-bundle.html',
  styleUrl: './details-bundle.css'
})
export class DetailsBundle implements OnInit {

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private service: BundleService,
    private bookingService: BookingService,
    private notificationService: NotificationService,
    private cartConfirmationService: CartConfirmationService,
    private authService: AuthService,
    private reviewService: ReviewService,
    private sanitizer: DomSanitizer,
    private http: HttpClient
  ) {}

  // Dados do pacote (vir√£o do back-end)
  pacote: Pacote | null = null;
  numeroPassageiros: number = 1;
  
  // Reviews do backend
  reviews: ReviewResponse[] = [];
  reviewsWithUsers: ReviewWithUser[] = []; // Nova propriedade para reviews com nomes de usu√°rios
  
  // Carrossel de reviews
  currentReviewIndex = 0;
  reviewsPerPage = 3;
  isLoadingReviews = false;

  // Pagina√ß√£o das avalia√ß√µes (manter para compatibilidade)
  avaliacoesPaginadas: Avaliacao[] = [];
  paginaAtual: number = 1;
  itensPorPagina: number = 3;
  totalPaginas: number = 0;

  // Dados de exemplo para avalia√ß√µes sumarizadas
  avaliacoesSumarizado = [
    { numero: 5, porcentagem: 85 },
    { numero: 4, porcentagem: 10 },
    { numero: 3, porcentagem: 3 },
    { numero: 2, porcentagem: 1 },
    { numero: 1, porcentagem: 1 }
  ];

  // Avalia√ß√µes de exemplo (remover quando integrar com back-end)
  avaliacoesExemplo: Avaliacao[] = [
    {
      id: 1,
      nomeUsuario: 'Allan Reymond',
      avatarUsuario: '/assets/imgs/fortaleza.jpg',
      nota: 4,
      comentario: '"Minha viagem de Recife para S√£o Paulo foi incr√≠vel! O voo foi tranquilo e a chegada no Aeroporto de Guarulhos foi bem organizada. Fiquei hospedado em um hotel na regi√£o da Avenida Paulista ‚Äî localiza√ß√£o excelente, perto de metr√¥, restaurantes e pontos tur√≠sticos. O quarto era confort√°vel, limpo e com um bom caf√© da manh√£ incluso."',
      dataAvaliacao: new Date('2024-01-15')
    },
    {
      id: 2,
      nomeUsuario: 'Maria Silva',
      avatarUsuario: '/assets/imgs/fortaleza.jpg',
      nota: 5,
      comentario: '"Experi√™ncia fant√°stica! A organiza√ß√£o do pacote foi impec√°vel e o atendimento superou minhas expectativas. Recomendo para quem quer conhecer S√£o Paulo com tranquilidade."',
      dataAvaliacao: new Date('2024-01-10')
    },
    {
      id: 3,
      nomeUsuario: 'Jo√£o Santos',
      avatarUsuario: '/assets/imgs/fortaleza.jpg',
      nota: 5,
      comentario: '"Viagem maravilhosa! O hotel era excelente e os passeios inclusos foram muito bem planejados. A equipe foi super prestativa em todos os momentos."',
      dataAvaliacao: new Date('2024-01-08')
    },
    {
      id: 4,
      nomeUsuario: 'Ana Paula',
      avatarUsuario: '/assets/imgs/fortaleza.jpg',
      nota: 4,
      comentario: '"√ìtima experi√™ncia! S√£o Paulo √© uma cidade incr√≠vel e o pacote cobriu os principais pontos tur√≠sticos. O √∫nico ponto a melhorar seria o tempo livre para explorar por conta pr√≥pria."',
      dataAvaliacao: new Date('2024-01-05')
    },
    {
      id: 5,
      nomeUsuario: 'Carlos Oliveira',
      avatarUsuario: '/assets/imgs/fortaleza.jpg',
      nota: 5,
      comentario: '"Perfeito do in√≠cio ao fim! A hospedagem era de primeira qualidade e as refei√ß√µes inclu√≠das estavam deliciosas. J√° estou planejando a pr√≥xima viagem com voc√™s."',
      dataAvaliacao: new Date('2024-01-03')
    },
    {
      id: 6,
      nomeUsuario: 'Fernanda Costa',
      avatarUsuario: '/assets/imgs/fortaleza.jpg',
      nota: 4,
      comentario: '"Adorei a viagem! O roteiro foi bem elaborado e conseguimos conhecer os principais pontos tur√≠sticos. O transporte foi pontual e confort√°vel."',
      dataAvaliacao: new Date('2024-01-01')
    },
    {
      id: 7,
      nomeUsuario: 'Roberto Lima',
      avatarUsuario: '/assets/imgs/fortaleza.jpg',
      nota: 5,
      comentario: '"Superou todas as minhas expectativas! A cidade de S√£o Paulo √© fascinante e o pacote permitiu conhec√™-la de forma completa e organizada."',
      dataAvaliacao: new Date('2023-12-28')
    }
  ];

  id!: string;
  bundleClass: BundleClass = new BundleClass();
  bundleImageUrl: string = '';
  
  // Propriedades para localiza√ß√£o
  departureLocation: string = '';
  destinationLocation: string = '';
  
  // Propriedades para Google Maps
  googleMapsEmbedUrl: string = '';
  safeGoogleMapsUrl: SafeResourceUrl | null = null;
  private readonly googleMapsApiKey: string = 'AIzaSyDpBEGEaO3fAaNOWHt4voCheJDGmQwRBLs';
  
  // Propriedades para datas formatadas
  formattedDepartureDate: string = '';
  formattedReturnDate: string = '';
  
  // Propriedade para dura√ß√£o calculada
  calculatedDuration: string = '';
  
  // Propriedade para avalia√ß√£o calculada (mockada - ser√° substitu√≠da pela real)
  calculatedRating: number = 5;
  
  // Propriedades para avalia√ß√£o real baseada nas reviews
  realAverageRating: number = 0; // M√©dia exata para exibi√ß√£o
  realStarsRating: number = 0;   // M√©dia arredondada para estrelas
  reviewsLoaded: boolean = false; // Flag para controlar quando reviews foram carregadas

  ngOnInit():void {
    this.id = this.route.snapshot.paramMap.get('id') as string;
    this.service.getBundleById(this.id)
    .subscribe(res => {
      this.bundleClass = res;
      this.loadBundleImage();
      this.loadBundleLocation();
      this.formatDates();
      this.calculateBundleDuration();
      this.calculateBundleRating();
      this.loadBundleReviews(); // Carregar reviews do backend
    });
  }

  loadBundleImage(): void {
    if (this.id) {
      console.log(`üñºÔ∏è Iniciando carregamento de imagem para bundle ${this.id}...`);
      console.log(`üñºÔ∏è URL do endpoint: http://localhost:8080/api/medias/images/bundle/${this.id}`);
      
      this.service.getBundleImage(parseInt(this.id)).subscribe({
        next: (imageResponse: MediaResponse[]) => {
          console.log(`üñºÔ∏è Resposta da API de imagem para bundle ${this.id}:`, imageResponse);
          console.log(`üñºÔ∏è Tipo da resposta:`, typeof imageResponse, Array.isArray(imageResponse));
          
          if (imageResponse && Array.isArray(imageResponse) && imageResponse.length > 0) {
            const rawImageUrl = imageResponse[0].mediaUrl;
            this.bundleImageUrl = this.processImageUrl(rawImageUrl);
            console.log(`üñºÔ∏è URL original da API: ${rawImageUrl}`);
            console.log(`üñºÔ∏è URL processada: ${this.bundleImageUrl}`);
          } else {
            console.log(`üñºÔ∏è Resposta inv√°lida ou vazia, usando imagem padr√£o`);
            this.bundleImageUrl = 'https://images.unsplash.com/photo-1483729558449-99ef09a8c325?w=800&h=400&fit=crop';
          }
        },
        error: (error) => {
          console.error(`‚ùå Erro ao carregar imagem para bundle ${this.id}:`, error);
          this.bundleImageUrl = 'https://images.unsplash.com/photo-1483729558449-99ef09a8c325?w=800&h=400&fit=crop';
        }
      });
    }
  }

  private processImageUrl(rawUrl: string): string {
    console.log(`üîÑ Processando URL da imagem: ${rawUrl}`);
    
    if (!rawUrl) {
      console.log(`‚ùå URL vazia, retornando imagem padr√£o`);
      return 'https://images.unsplash.com/photo-1483729558449-99ef09a8c325?w=800&h=400&fit=crop';
    }

    // Se j√° for uma URL completa (http/https), retorna como est√°
    if (rawUrl.startsWith('http://') || rawUrl.startsWith('https://')) {
      console.log(`‚úÖ URL j√° √© completa: ${rawUrl}`);
      return rawUrl;
    }

    // Se come√ßar com /, remove a barra inicial
    const cleanUrl = rawUrl.startsWith('/') ? rawUrl.substring(1) : rawUrl;
    const processedUrl = `http://localhost:8080/${cleanUrl}`;
    
    console.log(`üîÑ URL processada: ${processedUrl}`);
    return processedUrl;
  }

  onImageError(): void {
    console.log('‚ùå Erro ao carregar imagem no HTML, aplicando fallback');
    this.bundleImageUrl = 'https://images.unsplash.com/photo-1483729558449-99ef09a8c325?w=800&h=400&fit=crop';
  }

  loadBundleLocation(): void {
    if (this.id) {
      console.log(`üó∫Ô∏è Iniciando carregamento de localiza√ß√£o para bundle ${this.id}...`);
      
      this.service.getBundleLocation(parseInt(this.id)).subscribe({
        next: (locationResponse: BundleLocationResponse[]) => {
          console.log(`üó∫Ô∏è Resposta da API de localiza√ß√£o para bundle ${this.id}:`, locationResponse);
          
          if (locationResponse && Array.isArray(locationResponse) && locationResponse.length > 0) {
            const location = locationResponse[0];
            
            // Formatar local de partida
            if (location.departure) {
              this.departureLocation = `${location.departure.city}, ${location.departure.states} - ${location.departure.country.trim()}`;
              console.log(`üõ´ Local de partida: ${this.departureLocation}`);
            }
            
            // Formatar local de destino
            if (location.destination) {
              this.destinationLocation = `${location.destination.city}, ${location.destination.states} - ${location.destination.country.trim()}`;
              console.log(`üõ¨ Local de destino: ${this.destinationLocation}`);
            }
            
            // Gerar URL do Google Maps ap√≥s carregar as localiza√ß√µes
            this.generateGoogleMapsUrl(location);
          } else {
            console.log(`üó∫Ô∏è Resposta de localiza√ß√£o inv√°lida ou vazia`);
            this.departureLocation = 'Local de partida n√£o informado';
            this.destinationLocation = 'Local de destino n√£o informado';
          }
        },
        error: (error) => {
          console.error(`‚ùå Erro ao carregar localiza√ß√£o para bundle ${this.id}:`, error);
          this.departureLocation = 'Erro ao carregar local de partida';
          this.destinationLocation = 'Erro ao carregar local de destino';
        }
      });
    }
  }

  formatDates(): void {
    console.log(`üìÖ Formatando datas do bundle...`);
    
    // Formatar data de partida
    if (this.bundleClass.initialDate) {
      this.formattedDepartureDate = this.formatDate(this.bundleClass.initialDate);
      console.log(`üìÖ Data de partida formatada: ${this.formattedDepartureDate}`);
    }
    
    // Formatar data de retorno
    if (this.bundleClass.finalDate) {
      this.formattedReturnDate = this.formatDate(this.bundleClass.finalDate);
      console.log(`üìÖ Data de retorno formatada: ${this.formattedReturnDate}`);
    }
  }

  private formatDate(dateString: string): string {
    try {
      const date = new Date(dateString);
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      return `${day}/${month}/${year}`;
    } catch (error) {
      console.error('Erro ao formatar data:', error);
      return dateString; // Retorna a data original se houver erro
    }
  }

  calculateBundleDuration(): void {
    console.log(`‚è±Ô∏è Calculando dura√ß√£o do bundle...`);
    
    if (this.bundleClass.initialDate && this.bundleClass.finalDate) {
      const duration = this.calculateDuration(this.bundleClass.initialDate, this.bundleClass.finalDate);
      this.calculatedDuration = `${duration} ${duration === 1 ? 'dia' : 'dias'}`;
      console.log(`‚è±Ô∏è Dura√ß√£o calculada: ${this.calculatedDuration}`);
    } else {
      console.log(`‚è±Ô∏è Datas n√£o dispon√≠veis para c√°lculo de dura√ß√£o`);
      this.calculatedDuration = 'Dura√ß√£o n√£o informada';
    }
  }

  private calculateDuration(startDate: string, endDate: string): number {
    const start = new Date(startDate);
    const end = new Date(endDate);
    const diffTime = Math.abs(end.getTime() - start.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  }

  calculateBundleRating(): void {
    console.log(`‚≠ê Calculando avalia√ß√£o do bundle...`);
    
    if (this.bundleClass.bundleRank && this.bundleClass.id) {
      this.calculatedRating = this.getRatingFromRankConsistent(this.bundleClass.bundleRank, this.bundleClass.id);
      console.log(`‚≠ê Rank do bundle: ${this.bundleClass.bundleRank}`);
      console.log(`‚≠ê Avalia√ß√£o calculada: ${this.calculatedRating} estrelas`);
    } else {
      console.log(`‚≠ê Dados de rank n√£o dispon√≠veis, usando avalia√ß√£o padr√£o`);
      this.calculatedRating = 5; // Valor padr√£o
    }
  }

  // M√©todo de avalia√ß√£o consistente (mesmo usado na p√°gina bundle)
  private getRatingFromRankConsistent(rank: string, bundleId: number): number {
    switch (rank.toUpperCase()) {
      case 'BRONZE': return 1;
      case 'SILVER': 
      case 'PRATA': return 2;
      case 'GOLD': 
      case 'OURO': return 3;
      case 'PLATINUM': 
      case 'PLATINA': 
        return (bundleId % 2 === 0) ? 4 : 5;
      default: return 3;
    }
  }

  // M√©todo para gerar URL do Google Maps Embed API
  private generateGoogleMapsUrl(location: BundleLocationResponse): void {
    console.log(`üó∫Ô∏è Gerando URL do Google Maps...`);
    
    if (!location.departure || !location.destination) {
      console.log(`‚ùå Dados de localiza√ß√£o insuficientes para gerar mapa`);
      this.googleMapsEmbedUrl = '';
      this.safeGoogleMapsUrl = null;
      return;
    }

    // Formatar origem e destino para a API do Google Maps
    const origin = this.formatLocationForMaps(location.departure.city, location.departure.states, location.departure.country);
    const destination = this.formatLocationForMaps(location.destination.city, location.destination.states, location.destination.country);
    
    // Construir URL da API do Google Maps Embed
    const baseUrl = 'https://www.google.com/maps/embed/v1/directions';
    const params = new URLSearchParams({
      key: this.googleMapsApiKey,
      origin: origin,
      destination: destination,
      mode: 'flying',
      units: 'metric',
      language: 'pt-BR',
      region: 'BR'
    });

    this.googleMapsEmbedUrl = `${baseUrl}?${params.toString()}`;
    
    // Sanitizar a URL para uso no iframe
    this.safeGoogleMapsUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.googleMapsEmbedUrl);
    
    console.log(`üó∫Ô∏è Origem: ${origin}`);
    console.log(`üó∫Ô∏è Destino: ${destination}`);
    console.log(`üó∫Ô∏è URL do Google Maps gerada: ${this.googleMapsEmbedUrl}`);
  }

  // M√©todo auxiliar para formatar localiza√ß√£o para a API do Google Maps
  private formatLocationForMaps(city: string, state: string, country: string): string {
    // Remove espa√ßos extras do pa√≠s e formata para o padr√£o da API
    const cleanCountry = country.trim();
    const countryName = cleanCountry === 'BR' ? 'Brazil' : cleanCountry;
    
    // Formato: "Cidade, Estado, Pa√≠s" com caracteres especiais codificados para URL
    return `${city}, ${state}, ${countryName}`;
  }

  // M√©todos de pagina√ß√£o
  configurarPaginacao() {
    const avaliacoes = this.pacote?.avaliacoes || this.avaliacoesExemplo;
    this.totalPaginas = Math.ceil(avaliacoes.length / this.itensPorPagina);
    this.atualizarAvaliacoesPaginadas();
  }

  atualizarAvaliacoesPaginadas() {
    const avaliacoes = this.pacote?.avaliacoes || this.avaliacoesExemplo;
    const inicio = (this.paginaAtual - 1) * this.itensPorPagina;
    const fim = inicio + this.itensPorPagina;
    this.avaliacoesPaginadas = avaliacoes.slice(inicio, fim);
  }

  irParaPagina(pagina: number) {
    if (pagina >= 1 && pagina <= this.totalPaginas) {
      this.paginaAtual = pagina;
      this.atualizarAvaliacoesPaginadas();
    }
  }

  paginaAnterior() {
    this.irParaPagina(this.paginaAtual - 1);
  }

  proximaPagina() {
    this.irParaPagina(this.paginaAtual + 1);
  }

  getPaginas(): number[] {
    return Array.from({ length: this.totalPaginas }, (_, i) => i + 1);
  }

  // M√©todo para carregar dados do pacote (substituir por servi√ßo HTTP)
  carregarPacote(id: string) {
    // Dados de exemplo - substituir por chamada para o back-end
    this.pacote = {
      id: 1,
      titulo: 'Recife - S√£o Paulo',
      imagemPrincipal: '/assets/imgs/fortaleza.jpg',
      preco: 2400, // Ajustado para corresponder ao hero
      avaliacao: 5.0,
      totalAvaliacoes: 50,
      dataIda: '12/01/2025',
      dataVolta: '12/01/2025',
      duracao: '7 dias',
      tipoViagem: 'A√©reo + Hospedagem',
      incluso: 'Caf√© da manh√£, transfer',
      categoria: 'Pacote Completo',
      localizacao: 'Recife - S√£o Paulo',
      descricaoCompleta: 'Descubra as maravilhas de Recife e S√£o Paulo em uma viagem inesquec√≠vel. Este pacote oferece uma experi√™ncia completa com hospedagem de qualidade, transfers inclusos e as principais atra√ß√µes de ambas as cidades. Explore a rica cultura nordestina em Recife e a vibrante metr√≥pole paulista, com guias especializados e roteiros personalizados.',
      destino: 'Recife - S√£o Paulo',
      localPartida: 'Aeroporto Internacional do Recife / Guararapes',
      localDestino: 'Aeroporto Internacional de Guarulhos (GRU)',
      descricaoIncluso: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',
      avaliacoes: this.avaliacoesExemplo
    };

    // Configurar pagina√ß√£o ap√≥s carregar os dados
    this.configurarPaginacao();
  }

  // M√©todo para gerar array de estrelas
  getStarsArray(rating?: number): number[] {
    const finalRating = rating !== undefined ? rating : this.calculatedRating;
    return Array(Math.floor(finalRating)).fill(0);
  }

  // === M√âTODOS PARA AVALIA√á√ïES REAIS (BASEADAS EM REVIEWS) ===

  // Obter avalia√ß√£o real formatada para exibi√ß√£o
  getRealRatingFormatted(): string {
    if (!this.reviewsLoaded || this.realAverageRating === 0) {
      return '0.0';
    }
    return this.realAverageRating.toFixed(1);
  }

  // Obter n√∫mero de estrelas baseado nas reviews reais
  getRealStarsRating(): number {
    return this.reviewsLoaded ? this.realStarsRating : 0;
  }

  // Gerar array de estrelas baseado nas reviews reais
  getRealStarsArray(): number[] {
    const rating = this.getRealStarsRating();
    return Array(rating).fill(0);
  }

  // Verificar se deve mostrar avalia√ß√£o real (quando reviews est√£o carregadas)
  shouldShowRealRating(): boolean {
    return this.reviewsLoaded;
  }

  // M√©todo para calcular valor total
  calcularValorTotal(): string {
    if (!this.pacote) return '0';
    const total = this.pacote.preco * this.numeroPassageiros;
    return total.toLocaleString('pt-BR');
  }

  // M√©todo para realizar reserva - Criar reserva na API e redirecionar para booking
  realizarReserva() {
    if (!this.bundleClass) {
      console.error('‚ùå N√£o h√° dados do bundle para reservar');
      return;
    }

    console.log('üõí DETAILS: Realizando reserva do bundle:', this.bundleClass);
    
    // 1. PRIMEIRO: Verificar se o usu√°rio est√° logado
    if (!this.authService.isAuthenticated()) {
      console.log('üîê DETAILS: Usu√°rio n√£o logado, redirecionando para login');
      this.notificationService.showWarning(
        'Login necess√°rio',
        'Voc√™ precisa estar logado para fazer reservas'
      );
      
      // Redirecionar para a p√°gina de login
      this.router.navigate(['/auth/login'], {
        queryParams: { returnUrl: this.router.url } // Salva a URL atual para retornar depois do login
      });
      return;
    }
    
    // 2. VERIFICAR se o usu√°rio j√° possui este pacote
    this.bookingService.checkIfUserHasPackage(this.bundleClass.id).subscribe({
      next: (hasPackage: boolean) => {
        if (hasPackage) {
          // Usu√°rio j√° possui o pacote
          this.notificationService.showWarning(
            'Pacote j√° adicionado!',
            'Voc√™ j√° possui esse pacote no seu carrinho'
          );
          console.log('‚ö†Ô∏è DETAILS: Usu√°rio j√° possui este pacote');
          return;
        }
        
        // 3. USU√ÅRIO N√ÉO POSSUI: Criar reserva na API
        this.createNewReservation();
      },
      error: (error: any) => {
        console.error('‚ùå DETAILS: Erro ao verificar pacotes:', error);
        // Em caso de erro na verifica√ß√£o, tenta criar mesmo assim
        this.createNewReservation();
      }
    });
  }

  private createNewReservation(): void {
    this.bookingService.createReservation(this.bundleClass.id).subscribe({
      next: (reservationResponse: any) => {
        console.log('‚úÖ DETAILS: Reserva criada com sucesso:', reservationResponse);
        
        // Buscar o t√≠tulo correto para exibir no modal
        const packageTitle = this.bundleClass.bundleTitle || 
                            this.destinationLocation || 
                            'Pacote Selecionado';

        // Mostrar modal de confirma√ß√£o ao inv√©s de notifica√ß√£o simples
        this.cartConfirmationService.showConfirmationModal({
          title: 'Reserva Confirmada!',
          message: 'foi reservado com sucesso. O que deseja fazer agora?',
          packageName: packageTitle,
          onGoToBookings: () => {
            // Redirecionar para my-booking (minhas reservas) ao inv√©s de booking
            console.log('üõí Redirecionando para minhas reservas...');
            this.router.navigate(['/my-booking']);
          },
          onContinueShopping: () => {
            // N√£o faz nada, apenas fecha o modal
            console.log('üõí Usuario escolheu continuar comprando');
          }
        });
      },
      error: (error: any) => {
        console.error('‚ùå DETAILS: Erro ao criar reserva:', error);
        
        // Verificar se √© erro de autentica√ß√£o
        if (error.status === 403) {
          this.notificationService.showError(
            'Acesso negado',
            'Voc√™ n√£o tem permiss√£o para criar reservas. Verifique sua autentica√ß√£o.'
          );
          return;
        }
        
        if (error.status === 401) {
          this.notificationService.showError(
            'N√£o autorizado',
            'Sua sess√£o expirou. Fa√ßa login novamente.'
          );
          return;
        }
        
        // Outros erros
        this.notificationService.showError(
          'Erro ao criar reserva',
          `Erro ${error.status}: ${error.error?.message || error.message}. Tente novamente.`
        );
        
        // Em caso de erro, ainda redireciona para n√£o travar o fluxo
        this.redirectToBooking();
      }
    });
  }

  // M√©todo para redirecionar para booking com dados do pacote
  private redirectToBooking(): void {
    // Buscar o t√≠tulo correto de diferentes possibilidades
    const packageTitle = this.bundleClass.bundleTitle || 
                        this.destinationLocation || 
                        'Pacote Selecionado';

    const reservationData = {
      id: this.bundleClass.id,
      bundleId: this.bundleClass.id, // ID do bundle para buscar dados reais da API
      title: packageTitle,
      imageUrl: this.bundleImageUrl,
      startDate: this.formatDateForBooking(new Date()), // Data atual como padr√£o
      endDate: this.formatDateForBooking(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)), // +7 dias
      travelers: 1, // Padr√£o 1 viajante
      duration: 7, // Dura√ß√£o padr√£o
      description: this.bundleClass.bundleDescription || 'Pacote de viagem incr√≠vel com experi√™ncias √∫nicas',
      price: this.bundleClass.initialPrice || 2000
    };

    console.log('üõí DETAILS: Dados de reserva criados:', reservationData);
    console.log('üõí DETAILS: T√≠tulo definido como:', packageTitle);

    // Navegar para booking com os dados (igual ao my-booking e card)
    this.router.navigate(['/booking'], {
      state: {
        reservationData: reservationData
      }
    });
  }

  // M√©todo auxiliar para formatar data para booking
  private formatDateForBooking(date: Date): string {
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  // Carregar reviews do backend com nomes de usu√°rios
  loadBundleReviews(): void {
    if (!this.id) {
      console.warn('üìù loadBundleReviews: ID do bundle n√£o est√° dispon√≠vel');
      return;
    }
    
    this.isLoadingReviews = true;
    const bundleId = parseInt(this.id);
    console.log(`üìù loadBundleReviews: Iniciando carregamento para bundle ${bundleId}`);
    
    // Usar o ReviewService para buscar reviews com nomes de usu√°rios
    this.reviewService.getReviewsWithUserNamesByBundle(bundleId)
      .subscribe({
        next: (reviewsWithUsers) => {
          console.log(`üìù loadBundleReviews: Recebidas ${reviewsWithUsers.length} reviews para bundle ${bundleId}`);
          
          this.reviewsWithUsers = reviewsWithUsers;
          
          // Manter compatibilidade com o c√≥digo existente
          this.reviews = reviewsWithUsers.map(review => ({
            id: review.id,
            rating: review.rating,
            comment: review.comment,
            avaliationDate: review.avaliationDate,
            travelHistoryId: 0, // N√£o usado mais
            bundleId: bundleId
          }));
          
          this.isLoadingReviews = false;
          
          // Calcular avalia√ß√£o real baseada nas reviews
          this.calculateRealRating();
          
          console.log('üìù Reviews com usu√°rios carregadas:', reviewsWithUsers);
          console.log('‚≠ê Avalia√ß√£o real calculada:', this.realAverageRating);
          console.log('üèÅ loadBundleReviews: Carregamento finalizado com sucesso');
          
          // Garantir que reviewsLoaded seja true mesmo se n√£o h√° reviews
          if (reviewsWithUsers.length === 0) {
            console.log('üìù Nenhuma review encontrada para este bundle');
          }
        },
        error: (error) => {
          console.error('‚ùå Erro ao carregar reviews com usu√°rios:', error);
          console.error('‚ùå Detalhes do erro:', error.message || 'Erro desconhecido');
          
          this.reviews = [];
          this.reviewsWithUsers = [];
          this.isLoadingReviews = false;
          
          // Definir avalia√ß√£o como 0 em caso de erro
          this.realAverageRating = 0;
          this.realStarsRating = 0;
          this.reviewsLoaded = true;
          
          console.log('üèÅ loadBundleReviews: Carregamento finalizado com erro');
        }
      });
  }

  // Calcular avalia√ß√£o real baseada nas reviews
  private calculateRealRating(): void {
    if (this.reviews && this.reviews.length > 0) {
      // Calcular a m√©dia das avalia√ß√µes
      const totalRating = this.reviews.reduce((sum, review) => sum + this.getRatingNumber(review.rating), 0);
      const averageRating = totalRating / this.reviews.length;
      
      // Armazenar a m√©dia exata para exibi√ß√£o
      this.realAverageRating = averageRating;
      // Arredondar para o inteiro mais pr√≥ximo para exibi√ß√£o das estrelas
      this.realStarsRating = Math.round(averageRating);
      
      console.log(`üìä DetailBundle: ${this.reviews.length} reviews, m√©dia: ${averageRating.toFixed(1)}, estrelas: ${this.realStarsRating}`);
    } else {
      // Se n√£o h√° reviews, define como 0
      this.realAverageRating = 0;
      this.realStarsRating = 0;
      console.log('üìä DetailBundle: sem reviews, definindo avalia√ß√£o como 0');
    }
    
    // Marcar que as reviews foram carregadas
    this.reviewsLoaded = true;
  }

  // M√©todos do carrossel de reviews
  get visibleReviews(): ReviewResponse[] {
    const start = this.currentReviewIndex;
    const end = start + this.reviewsPerPage;
    return this.reviews.slice(start, end);
  }

  get canGoPreviousReview(): boolean {
    return this.currentReviewIndex > 0;
  }

  get canGoNextReview(): boolean {
    return this.currentReviewIndex + this.reviewsPerPage < this.reviews.length;
  }

  previousReviews(): void {
    if (this.canGoPreviousReview) {
      this.currentReviewIndex = Math.max(0, this.currentReviewIndex - this.reviewsPerPage);
    }
  }

  nextReviews(): void {
    if (this.canGoNextReview) {
      this.currentReviewIndex = Math.min(
        this.reviews.length - this.reviewsPerPage,
        this.currentReviewIndex + this.reviewsPerPage
      );
    }
  }

  // Converter rating string para n√∫mero
  getRatingNumber(rating: string): number {
    const ratingMap: { [key: string]: number } = {
      'ONE_STAR': 1,
      'TWO_STARS': 2,
      'THREE_STARS': 3,
      'FOUR_STARS': 4,
      'FIVE_STARS': 5
    };
    return ratingMap[rating] || 0;
  }

  // Gerar array de estrelas para exibi√ß√£o
  getStarsArrayForRating(rating: string): number[] {
    const ratingNumber = this.getRatingNumber(rating);
    return Array(ratingNumber).fill(0);
  }

  // Formatar data da review
  formatReviewDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  // Agrupar reviews para o carrossel (3 por slide)
  getReviewGroups(): ReviewResponse[][] {
    const groups: ReviewResponse[][] = [];
    for (let i = 0; i < this.reviews.length; i += this.reviewsPerPage) {
      groups.push(this.reviews.slice(i, i + this.reviewsPerPage));
    }
    return groups;
  }

  // Obter nome do usu√°rio da review baseado no √≠ndice
  getReviewUserName(index: number): string {
    if (index >= 0 && index < this.reviewsWithUsers.length) {
      return this.reviewsWithUsers[index].userName || 'Viajante An√¥nimo';
    }
    return 'Viajante An√¥nimo';
  }
}
